#include <Arduino.h>
#include <camera.h>
#include <lcd.h>

xQueueHandle xqh = NULL;
TaskHandle_t videoTask = NULL;

// 显示任务
void display(void *p)
{
    LGFX lcd;
    lcd.init();
    lcd.setRotation(0);
    lcd.setBrightness(200);
    lcd.setColorDepth(16);
    lcd.fillScreen(TFT_BLACK);

    for (;;)
    {
        camera_fb_t fb;
        if (xQueueReceive(xqh, &fb, 5) == pdTRUE)
        {
            lcd.pushImage(0, 0, fb.width, fb.height, (uint16_t *)fb.buf);
            heap_caps_free(fb.buf);
        }
    }

    vTaskDelete(NULL);
}

void video(void *p)
{
    if (esp_camera_init(&camera_config) != ESP_OK)
    {
        Serial.println("Camera Init Failed");
        return;
    }
    Serial.println("Camera Init Succeed");

    for (;;)
    {
        camera_fb_t *fb = esp_camera_fb_get();
        if (!fb)
        {
            Serial.println("Camera Capture Failed");
            return;
        }

        uint8_t *buf = (uint8_t *)heap_caps_malloc(fb->len * sizeof(uint8_t), MALLOC_CAP_DEFAULT);
        if (buf != NULL)
        {
            memcpy(buf, fb->buf, fb->len);
            camera_fb_t cfb = {
                .buf = buf,
                .len = fb->len,
                .width = fb->width,
                .height = fb->height,
            };

            if (xQueueSend(xqh, &cfb, 5) != pdPASS)
            {
                Serial.println("Queue Send Failed");
            }
        }

        esp_camera_fb_return(fb);
    }

    vTaskDelete(NULL);
}

void setup()
{
    Serial.begin(9600);

    xqh = xQueueCreate(10, sizeof(camera_fb_t));
    if (xqh == NULL)
    {
        Serial.println("queue create fail...");
        return;
    }

    if (xTaskCreatePinnedToCore(display, "display", 8192, NULL, 1, NULL, 0) != pdTRUE)
    {
        Serial.println("Task(display) Create Failed");
    }
    if (xTaskCreatePinnedToCore(video, "video", 8192, NULL, 1, &videoTask, 0) != pdTRUE)
    {
        Serial.println("Task(video) Create Failed");
    }
}

void loop()
{
}

#include "lcd.h"
#include <JPEGDEC.h>

SPIClass spi(1);
Arduino_ST7789 *gfx = NULL;

int JPEGDraw(JPEGDRAW *pDraw)
{
    gfx->draw16bitBeRGBBitmap(pDraw->x + 20, pDraw->y + 60, pDraw->pPixels, pDraw->iWidth, pDraw->iHeight);
    return 1;
}

void displayTask(void *p)
{
    xQueueHandle *queue = (xQueueHandle *)p;

    // 解码器
    JPEGDEC djpeg;

    Arduino_DataBus *bus = new Arduino_HWSPI(39, 40, 48, 47, -1, &spi);
    gfx = new Arduino_ST7789(bus, 38, 0, true, 240, 240);

    gfx->begin();
    gfx->fillScreen(BLACK);

    gfx->setTextSize(2);
    gfx->setTextColor(WHITE);
    gfx->setCursor(72, 20);
    gfx->printf("ESP32 S3");

    Serial.println("Lcd Setup Done");

    JpegData jd;

    while (1)
    {
        if (xQueueReceive(*queue, &jd, 10))
        {
            if (jd.buf == NULL)
            {
                continue;
            }

            if (djpeg.openRAM(jd.buf, jd.len, JPEGDraw))
            {
                djpeg.setPixelType(RGB565_BIG_ENDIAN);
                djpeg.decode(0, 0, JPEG_SCALE_QUARTER);
                djpeg.close();
            }
            else
            {
                Serial.println("JPEG decode failed");
            }

            heap_caps_free(jd.buf);
        }

        // 喂狗
        vTaskDelay(1);
    }

    vTaskDelete(NULL);
}